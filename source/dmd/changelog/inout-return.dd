The `inout` attribute no longer implies the `return` attribute

The compiler would formerly add the `return` attribute to `inout` functions, under the assumption that every `inout` function would return its argument.
However, it could also return a member of the `inout` argument, which would still be `inout` because `const` and `immutable` are transitive, while `return` semantics are not transitive.

---
@safe:

struct Node
{
    Node* next;
    int x;

    // This escapes a pointer to this struct
    // This used to be allowed because of `inout`
    @safe inout(int)* getScopePointer() inout
    {
        return &this.x;
    }

    // But what if you do not return a pointer to this struct?
    // `inout` applies because it's transitive, but `return ref` does not
    // The compiler could needlessly treat the returned pointer as a scope pointer
    @safe inout(int)* getNonScopePointer() inout
    {
        return &this.next.x;
    }

    // Corrective action for the first case:
    // if you want `inout` + `return ref`, annotate it with both
    @safe inout(int)* getScopePointer() inout return
    {
        return &this.x;
    }
}
---
